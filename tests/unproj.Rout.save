
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> if (require(rgdal) == FALSE)
+ 	q()
Loading required package: rgdal
Loading required package: sp
rgdal: version: 0.8-11, (SVN revision 479M)
Geospatial Data Abstraction Library extensions to R successfully loaded
Loaded GDAL runtime: GDAL 1.9.2, released 2012/10/08
Path to GDAL shared files: /usr/share/gdal/1.9
Loaded PROJ.4 runtime: Rel. 4.8.0, 6 March 2012, [PJ_VERSION: 480]
Path to PROJ.4 shared files: (autodetected)
> 
> # for validity of covariance functions on the sphere, see also:
> # DOI 10.1007/s11004-011-9344-7
> # http://mypage.iu.edu/~srobeson/Pubs/variogram_sphere_mathgeo_2011.pdf
> 
> library(sp)
> data(meuse)
> coordinates(meuse) = ~x+y
> proj4string(meuse) = CRS("+init=epsg:28992")
> meuse.ll = spTransform(meuse, CRS("+proj=longlat"))
> library(gstat)
> variogram(log(zinc)~1, meuse.ll)
    np       dist     gamma dir.hor dir.ver   id
1   57 0.07927429 0.1234479       0       0 var1
2  299 0.16393279 0.2162185       0       0 var1
3  419 0.26729856 0.3027859       0       0 var1
4  457 0.37264154 0.4121448       0       0 var1
5  547 0.47835030 0.4634128       0       0 var1
6  533 0.58518328 0.5646933       0       0 var1
7  574 0.69296369 0.5689683       0       0 var1
8  565 0.79606409 0.6176067       0       0 var1
9  588 0.90298675 0.6482246       0       0 var1
10 543 1.01099706 0.6915705       0       0 var1
11 501 1.11764852 0.7027385       0       0 var1
12 477 1.22118526 0.6038118       0       0 var1
13 451 1.32888347 0.6524032       0       0 var1
14 458 1.43693105 0.5653087       0       0 var1
15 415 1.54297395 0.5748096       0       0 var1
> 
> cloud1 = variogram(log(zinc)~1, meuse, cloud=T, cutoff=6000)
> cloud2 = variogram(log(zinc)~1, meuse.ll, cloud=T, cutoff=6)
> 
> plot(cloud1$dist/1000, cloud2$dist, xlab="Amersfoort, km", ylab = "Long/lat")
> abline(0,1)
> 
> library(fields)
Loading required package: spam
Loading required package: grid
Spam version 0.30-1 (2013-08-25) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: 'spam'

The following object is masked from 'package:base':

    backsolve, forwardsolve

Loading required package: maps
> data(ozone2)
> oz = SpatialPointsDataFrame(ozone2$lon.lat, 
+ 		data.frame(t(ozone2$y)), 
+ 		proj4string=CRS("+proj=longlat"))
> variogram(X870731~1,oz[!is.na(oz$X870731),])
    np      dist    gamma dir.hor dir.ver   id
1  196  17.38114 144.0608       0       0 var1
2  246  40.30993 179.9202       0       0 var1
3  209  69.02224 132.7199       0       0 var1
4  275  96.68155 175.9893       0       0 var1
5  282 122.80156 230.7471       0       0 var1
6  390 151.15598 317.6391       0       0 var1
7  360 178.01489 310.1876       0       0 var1
8  396 206.30205 320.0550       0       0 var1
9  475 233.40683 336.2755       0       0 var1
10 480 260.46479 337.9021       0       0 var1
11 426 287.63602 264.3209       0       0 var1
12 443 315.82090 302.1861       0       0 var1
13 470 342.88135 373.2437       0       0 var1
14 572 370.79840 388.2819       0       0 var1
15 795 397.66880 479.5384       0       0 var1
> utm16 = CRS("+proj=utm +zone=16")
> oz.utm = spTransform(oz, utm16)
> variogram(X870731~1,oz.utm[!is.na(oz$X870731),])
    np      dist    gamma dir.hor dir.ver   id
1  197  17443.99 143.5037       0       0 var1
2  245  40383.30 180.5144       0       0 var1
3  211  69178.16 134.2920       0       0 var1
4  278  97068.08 174.2017       0       0 var1
5  283 123380.15 232.2221       0       0 var1
6  393 151741.31 318.7762       0       0 var1
7  356 178620.56 312.9364       0       0 var1
8  400 206865.15 314.7740       0       0 var1
9  485 234294.31 340.8188       0       0 var1
10 476 261547.41 331.8010       0       0 var1
11 427 288749.42 267.5269       0       0 var1
12 452 317219.28 308.6634       0       0 var1
13 467 344418.75 365.8126       0       0 var1
14 596 372513.02 395.8868       0       0 var1
15 784 399259.25 490.6399       0       0 var1
> 
> # Timothy Hilton, r-sig-geo, Sept 14, 2008:
> 
> foo <-
+ structure(list(z = c(-1.95824831109744, -1.9158901643563, 4.22211761150161,
+ 3.23356929459598, 1.12038389231868, 0.34613850821113, 1.12589932643631,
+ 23.517912251617, 3.0519158690268, 3.20261431141517, -2.10947106854739
+ ), lon = c(-125.29228, -82.1556, -98.524722, -99.948333, -104.691741,
+ -79.420833, -105.100533, -88.291867, -72.171478, -121.556944,
+ -89.34765), lat = c(49.87217, 48.2167, 55.905833, 56.635833,
+ 53.916264, 39.063333, 48.307883, 40.0061, 42.537756, 44.448889,
+ 46.242017)), .Names = c("z", "lon", "lat"), row.names = c(NA,
+ -11L), class = "data.frame")
> 
> coordinates(foo) <- ~lon+lat
> 
> proj4string(foo) <- CRS('+proj=longlat')
> 
> vg.foo <- variogram(z~1, foo, cloud=TRUE, cutoff=1e10)
> 
> cat('==========\nvariogram:\n')
==========
variogram:
> print(head(vg.foo))
       dist        gamma dir.hor dir.ver   id left right
1 3115.1110 8.971063e-04       0       0 var1    2     1
2 1907.9013 1.909846e+01       0       0 var1    3     1
3 1405.2896 1.883757e+01       0       0 var1    3     2
4 1837.3802 1.347749e+01       0       0 var1    4     1
5 1522.5154 1.325847e+01       0       0 var1    4     2
6  119.9101 4.886139e-01       0       0 var1    4     3
> 
> cat('==========\nspDistsN1 Distances:\n')
==========
spDistsN1 Distances:
> print(spDistsN1(coordinates(foo), coordinates(foo)[1,], longlat=TRUE))
 [1]    0.0000 3115.1110 1907.9013 1837.3802 1481.5415 3775.3386 1480.4328
 [8] 3081.4193 4090.2668  665.5109 2683.1053
> 
> proc.time()
   user  system elapsed 
  2.404   0.080   2.488 
